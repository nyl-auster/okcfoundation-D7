<?php
/**
 * @file
 *
 * Add a textarea in block configuration to set responsive classes
 * for zurb foundation css framework. Use with okcdesign theme.
 *
 * foundation classes MUST be specified in drupal ini format in
 * the textarea from block configuration page.
 * @code
 *   * = large-12 columns
 *   <front> = small-6 columns end
 *   node/4/* = large-12 columns
 * @endcode
 *
 * key is the page targeted, and value is the foundation classes the block will use.
 * "*" is a special wildcard meaning "for all pages".
 *
 * Additionnaly, you may use your theme info file to register your
 * block grid informations, like this :
 *
 * okclayout_classes[block-15][*] = large-12 columns
 * okclayout_classes[user-online][<front>] = large-1 columns
 *
 * Where "block-15" is "module-delta"; "*" is the targeted page and "large-12 columns" is foundation classes.
 *
 * If a block as classes in both info files and block configuration page, the block configuration
 * page wins againts theme info file.
 * Juste empty textarea to make theme info file active again for this block.
 *
 * Using themeinfo file is a nice way to version your grids layout; there is no easy
 * way to deploy configuration saved in textarea.
 */

function okclayout_block_info() {
  // This example comes from node.module.
  $blocks['site-title'] = array(
    'info' => t('[OKC Layout] Display site title'),
  );
  $blocks['site-slogan'] = array(
    'info' => t('[OKC Layout] Display site slogan'),
  );
  $blocks['site-breadcrumb'] = array(
    'info' => t('[OKC Layout] Display breadcrumb'),
  );
  $blocks['site-messages'] = array(
    'info' => t('[OKC Layout] Display site messages'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view()
 * @param string $delta
 * @return array
 */
function okclayout_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'site-title':
      $block['subject'] = t('[OKC Layout] Site title');
      $block['content'] = variable_get('site_name');
      break;
    case 'site-slogan':
      $block['subject'] = t('[OKC Layout] Site slogan');
      $block['content'] = variable_get('site_slogan');
      break;
    case 'site-breadcrumb':
      $block['subject'] = t('[OKC Layout] Breadcrumb');
      $block['content'] = theme('breadcrumb', drupal_get_breadcrumb());
      break;
    case 'site-messages':
      $block['subject'] = t('[OKC Layout] Site messages');
      $block['content'] = theme('status_messages', drupal_get_messages());
      break;
  }
  return $block;
}

/**
 * Implements hook_permission().
 */
function okclayout_class_permission() {
  return array(
    'administer block responsive classes' => array(
      'title' => t('Administer block responsive classes'),
      'description' => t('Set css zurb foundation classes for blocks.'),
    ),
  );
}

/**
 * Implements hook_form_alter()
 */
function okclayout_form_alter(&$form, &$form_state, $form_id) {
  if (user_access('administer block responsive classes') && ($form_id == 'block_admin_configure' || $form_id == 'block_add_block_form')) {
    $form['#submit'][] = 'okclayout_block_submit';
    $block = block_load($form['module']['#value'], $form['delta']['#value']);
    // add our configuration form, a simple textarea for now
    okclayout_block_expert_form($form, $form_state, $block);
  }
}

/**
 * Configuration form to set zurb classes
 */
function okclayout_block_expert_form(&$form, &$form_state, $block) {
  $form['settings']['okclayout_classes'] = array(
    '#type' => 'textarea',
    '#title' => t('Responsive classes'),
    '#default_value' => isset($block->okclayout_classes) ? $block->okclayout_classes : '',
    '#description' => t('Set css foundation classes for this block. As you may wish to set different width for specific pages, this must be of the following form : {page} = classes <br />
      example :<br /> <strong>'
      . htmlentities('<front>') . '= small-12 large-6 columns<br/><br/></strong>
      To set classes for all pages, use wildcard "*" :<br/>
      <strong>* = small-12 large-6 columns</strong><br/><br/>
      Feel free to use any foundation classes you wish, check foundation docs.'
      ),
    '#weight' => 0,
  );
}

/**
 * If use entered only "small-12 medium-6 large-8 columns" considers he wants
 * to use " * = small-12 medium-6 large-8 columns" to make his life easier.
 * @param $config
 * @return mixed
 */
function _okclayout_normalize_format($config) {
  // make sure newlines don't mess our interpretation of config...
  $lines  = array_filter(explode("\n", trim($config)));
  foreach ($lines as $i => $line) {
    $array = explode('=', $line);
    if (count($array) == 1) {
      $lines[$i] = '* = ' . $line;
    }
  }
  $config = (implode("\r\n", $lines));
  var_dump($config);
  return $config;
}

/**
 * Custom submit callback for configuration form : save configuration
 * in  blocks table.
 * @param $form
 * @param $form_state
 */
function okclayout_block_submit($form, $form_state) {
  $config = _okclayout_normalize_format($form_state['values']['okclayout_classes']);
  db_update('block')
    ->fields(array('okclayout_classes' => $config))
    ->condition('module', $form_state['values']['module'])
    ->condition('delta', $form_state['values']['delta'])
    ->execute();
  // Flush all context module cache to use the updated okclayout_classes.
  if (module_exists('context')) {
    cache_clear_all('context', 'cache', TRUE);
  }
}

/**
 * Load foundation classes for a given block.
 * Configuration may be stored in theme .info file or in database.
 * Database configuration overrides classes defined in theme .info file
 * @param $delta
 */
function okclayout_block_get_foundation_classes($delta) {
  // first check if we find classes for this blocks in the theme info file
  $foundation_classes = okclayout_get_block_classes_from_info_files();
  if (isset($foundation_classes[$delta])) {
    return $foundation_classes[$delta];
  }
}

/**
 * Get responsive blocks information in theme info file (if any)
 * @return array if responsive_blocks key is found, null otherwise
 */
function okclayout_get_block_classes_from_info_files() {

  static $foudation_classes = array();
  if ($foudation_classes) return $foudation_classes;

  $themes = list_themes();
  $theme = $themes[$GLOBALS['theme']];
  if (isset($theme->info['okclayout'])) {
    $foudation_classes = $theme->info['okclayout'];
  }
  return $foudation_classes;

}

/**
 * Implements theme_preprocess_block().
 *
 * Extend block's classes with any user defined responsive classes.
 */
function okclayout_preprocess_block(&$vars) {

  static $responsive_blocks = array();

  $block = $vars['block'];
  $block_classes = '';
  $datas = array();

  if (!$responsive_blocks) {
    $responsive_blocks = okclayout_get_block_classes_from_info_files();
  }

  // if responsive classes have been found in database. Database win
  // over theme info files.
  if (isset($block->okclayout_classes) && trim($block->okclayout) != '') {
    $datas = drupal_parse_info_format($block->okclayout);
    //if ($block->delta == '15') {
      //var_dump($datas);exit;
    //}
  }
  // else, look for informations for this blocks in theme info files
  elseif (isset($responsive_blocks["$block->module-$block->delta"])) {
    $datas = $responsive_blocks["$block->module-$block->delta"];
  }

  // do nothing if no datas are found anywhere
  if (!$datas) return;

  // special case : * mean "for all pages". remove this key if exist
  // or drupal_match_path() will complain
  if (isset($datas['*'])) {
    $block_classes = $datas['*'];
    unset($datas['*']);
  }

  // now, let see if user has defined some classes for current_page
  // currentlty, node/* will win over node/6 if node/* is in first place.
  // It means we have to put first the most specific classes or it won't work as expected
  foreach ($datas as $path => $classes) {
    if(drupal_match_path($_GET['q'], $path)) {
      $block_classes = $classes;
      break;
    }
  }

  // time so set our magic classes !
  if ($block_classes) {
    $vars['classes_array'] = array_merge($vars['classes_array'], explode(' ', $block_classes));
  }

}

/*
function okclayout_ui_block_form(&$form, &$form_state, $block) {

  // Per-path visibility.
  $form['settings']['okclayout_classes'] = array(
    '#type' => 'vertical_tabs',
    '#tree' => TRUE,
  );
  foreach (okclayout_breakpoints_info() as $size_id => $size_name) {

    $form['settings']['okclayout_classes'][$size_id] = array(
      '#type' => 'fieldset',
      '#title' => t($size_name),
      '#group' => 'okclayout_classes',
      '#weight' => 0,
    );

    foreach (range(1, 15) as $i) {

      $form['settings']['okclayout_classes'][$size_id][$i] = array(
        '#type' => 'fieldset',
        '#title' => 'test',
        '#collapsible' => TRUE,
        '#collapsed' => $i == 1 ? FALSE : TRUE,
      );
      $form['settings']['okclayout_classes'][$size_id][$i]['grid_width'] = array(
        '#type' => 'select',
        '#title' => t('I want a with of'),
        '#options' => range(1, 12),
        '#weight' => 0,
      );
      $form['settings']['okclayout_classes'][$size_id][$i]['page'] = array(
        '#type' => 'textfield',
        '#title' => t('For those pages'),
        '#default_value' => '',
        '#weight' => 0,
      );


    }
  }
}
*/
